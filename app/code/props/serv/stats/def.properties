#

# The service info necessary for registering with the naming service.

#

#stats.TYPE=stats

stats.NAME=stats01

stats.PORT=10900



# Max request threads. The server will allocate a pool (on demand) of

# request threads to be used for processing requests coming from the

# client. Since all the work is performed by yet another pool of threads,

# it is probably best to keep this number to 20 or less.



server.maxReqThreads=20



# The size of the user cache. Normally the stats server needs to talk to

# the userserver to retrieve the profileId of a user given a screenname.

# This info is static, so it is cached. The following setting determines

# the size of this cache. Do not set it to more than about 200k, since

# that is pretty big. Also, if you do set it higher than about 50k, use

# -Xmx128m when starting up the stats server. The default is 50k.



server.userCacheSize=50000



# Set this to 1 if you want the server to disable writing to the db.

# This is an "oh shit!" flag. In case it turns out that in production

# we are pounding the stats db too hard, you can set this to 1, restart

# the server, and all requests sent to the server will just be dropped

# on the floor unless server.writeToDisk is set to '1'.



# server.dbWritesOff=1



# The following only matters if server.dbWritesOff=1. If it is, and this

# property is set to 1, then the writes will be sent to the disk instead.

# The data can then later be loaded into the db when the db is ready to

# accept it.

#

# server.writeToDisk=1



# The following two settings deal with switching back and forth beween

# writing to the db and writing to disk. If the queue gets too big 

# (qsize > highWatermark) the server will write out all requests to

# a data file to be processed later (currently manual, but the hope

# is to make this automatic in the future). When the queue size drops

# below lowWatermark, then it will write to the db again. It is much

# faster writing the requests out to a file than to the db, especially

# when the statsdb machine is being stressed. The low default to 25k,

# the high to 30k.

#



server.lowWatermark=25000

server.highWatermark=30000



# The following two settings deal with how often to write counting

# service transactions to the db. If total count for a record excedes 

# the dbWriteCountTheshold that record is written to the database. 

# If the time since the record was last written excedes the 

# dbWriteTimeThreshold that record is written to the database.

# The dbWriteTimeThreshold value is in seconds and defaults to 60.

# The dbWriteCountThreshold defaults to 50000.



server.dbWriteTimeThreshold=60

server.dbWriteCountThreshold=50000



# The flushThreadInterval sets how often the count cache is flushed to 

# the db. The value is in seconds and defaults to 3600 (1 hour). 



server.flushThreadInterval=3600





########################################################################

# Overflow properties. The server supports the notion of the db

# getting overloaded and failing over to writing to a local file.

# The server will then wake up at a certin time, and try to read

# the local file in order to process those results.

########################################################################

#

# Time to start loading the overflow file (HHMM).

#

overflow.loadStartTime=1100



#

# Time interval between loading the overflow file (minutes). The

# default is one day (1440).

#

overflow.loadInterval=1440



#

# Maximum number of requests written into the overflow file.

# Once this limit is reached, the file will be closed and

# reopened later if more objects need to be stored.

#

overflow.saveLimit=1000

#

# The name of the overflow file.

#

overflow.fileName=overflow.dat



# 

# The jdbc driver config for access to the stats db.

# Note that the server writes to the db on a separate thread pool, it

# does not use the std server thread pool to write the requests (that

# pool simply puts the request in a queue). The size of this pool

# is equal to StatsDb.MAXCONNS, as that is all it is doing, is talking to the

# db.

#

StatsDb.MAXCONNS=2
StatsDb.JDBCDRIVER=oracle.jdbc.driver.OracleDriver
StatsDb.JDBCURL=jdbc:oracle:thin:@
StatsDb.DBHOST=ora1.dev.platform.thedream.cc
StatsDb.DBPORT=1521
StatsDb.DBSID=PLATFORM
StatsDb.DBUSERNAME=STATSSERVER
StatsDb.DBPASSWORD=6979902C4AE6533833E3348757748B21





# The logging severity level. The lower the level the more debugging

# output. Values: detail, low, medium, high, none. The value is

# case-insensitive.



logger.severity=low



#

# Want to turn off fast-fail for the stats server since it has its own

# queueing mechanism.

#

server.fastFailTimeoutSecs=0

